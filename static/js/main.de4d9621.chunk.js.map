{"version":3,"sources":["components/Container/index.js","components/ClickItem/index.js","components/Navbar/index.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","ClickItem","alt","name","style","backgroundImage","image","top","Math","floor","random","animationDuration","height","width","animationDelay","onClick","clickCount","id","Navbar","lose","win","to","score","highscore","Main","state","friends","gameOver","setState","console","log","this","forEach","count","find","item","index","sort","tabIndex","marginTop","map","friend","key","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de4d9621.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return (\n    <main className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n  );\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      alt={props.name}\n      className=\"click-item\"\n      style={{\n        backgroundImage: props.image ? `url(${props.image})` : \"none\",\n        top: Math.floor(Math.random() * 60) + 20 + \"vh\",\n        animationDuration: Math.random() * 30 + 8 + \"s\",\n        height: props.height,\n        width: props.width,\n        animationDelay: Math.random() * -25 + \"s\"\n      }}\n      onClick={() => props.clickCount(props.id)}\n    />\n  );\n}\n\nexport default ClickItem;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar(props) {\n  return (\n    <nav\n      className={\n        (props.lose === true ? \"incorrect navbar\" : \"navbar\") +\n        (props.win === true ? \" correct\" : \" navbar\")\n      }\n    >\n      <ul>\n        <li>\n          {\" \"}\n          <Link className=\"navbar-brand\" to=\"/\">\n            Freshwater Fish Game\n          </Link>\n          <div className=\"subheader\">Click each fish one time to win!</div>\n        </li>\n        <li>Current Score: {props.score}</li>\n        <li>High Score: {props.highscore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\r\nimport Container from \"../components/Container\";\r\nimport friends from \"../friends.json\";\r\nimport ClickItem from \"../components/ClickItem\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    friends,\r\n    score: 0,\r\n    highscore: 0,\r\n    lose: false,\r\n    win: false\r\n  };\r\n\r\n  gameOver = () => {\r\n    this.setState({ lose: true });\r\n    if (this.state.score > this.state.highscore) {\r\n      this.setState({ highscore: this.state.score }, function() {\r\n        console.log(this.state.highscore);\r\n      });\r\n    }\r\n    this.state.friends.forEach(friends => {\r\n      friends.count = 0;\r\n    });\r\n    // alert(`Game Over :( \\nscore: ${this.state.score}`);\r\n\r\n    this.setState({ score: 0 });\r\n    return true;\r\n  };\r\n\r\n  clickCount = id => {\r\n    this.setState({ lose: false, win: false });\r\n    this.state.friends.find((item, index) => {\r\n      if (item.id === id) {\r\n        if (!friends[index].count) {\r\n          friends[index].count = 1;\r\n          this.setState({ score: this.state.score + 1 });\r\n          this.setState({ win: true });\r\n          this.state.friends.sort(() => Math.random() - 0.5);\r\n          return true;\r\n        } else {\r\n          this.gameOver();\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          score={this.state.score}\r\n          highscore={this.state.highscore}\r\n          win={this.state.win}\r\n          lose={this.state.lose}\r\n        />\r\n        <div\r\n          className=\"waterFilter\"\r\n          tabIndex=\"-1\"\r\n          style={{ backgroundImage: 'url(\"./images/waterBackground.jpg\")' }}\r\n        ></div>\r\n        <Container style={{ marginTop: 30 }}>\r\n          {this.state.friends.map(friend => (\r\n            <ClickItem\r\n              key={friend.name}\r\n              id={friend.id}\r\n              image={friend.image}\r\n              clickCount={this.clickCount}\r\n              height={friend.height}\r\n              width={friend.width}\r\n            />\r\n          ))}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Main from \"./pages/Main\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Main} />\n        <Route exact path=\"/clicky-game\" component={Main} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}